/* Project Euler -- Problem 12
 *
 * This program finds the first triangle number to have over k divisors
 *
 */

long long int triangle_num(long long int n)
{
   return  ( n * (n+1) ) / 2;
}

int is_divisor(long long int n, long long int k)
{
   return ( (n % k) == 0 );
}

long long int num_divisors(long long int n)
{
   long long int i=1;
   long long int number_of_divisors = 0;
   for (i=1; i<=n; i++)
      if (is_divisor(n, i)) 
         number_of_divisors++;
   printf("\t%lld has %lld divisors\n", n, number_of_divisors);
   return number_of_divisors;
}

int main()
{
   long long int n=1;
   long long num_div_n = 1;
   long long int num_div_nplusone = 2;

   while( (num_div_n + num_div_nplusone) <= 500 )
   {
      num_div_n = num_div_nplusone;
      num_div_nplusone = num_divisors(++n);
      printf("Trying %lld whose triangle number is %lld, it has %lld divisors\n", n, triangle_num(n), num_div_n + num_div_nplusone - 1);
   }

   printf("The answer is %lld", triangle_num(n-1));
}
	
